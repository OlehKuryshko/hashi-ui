name: CI

on:
  push:
    branches:
      - "feature/*"  # Trigger on pushes to branches that start with "feature/"
    tags:
      - "v*"         # Trigger on pushes to tags that start with "v"
  pull_request:
    branches:
      - "feature/*"  # Trigger on pull requests to a branch that starts with "feature/"

jobs:
  # -------------------------------------------------------------
  # 1) Build and (optionally) push Docker images
  #    for feature branches, PRs, and release tags.
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      CGO_ENABLED: 0
      DOCKER_BUILDKIT: 1
      GO111MODULE: on
      GOBUILD: "linux-amd64 windows-amd64 darwin-amd64 linux-arm64"
      GOPROXY: "https://proxy.golang.org"

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.16"

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "12"

      - name: Cache Go & Node dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.go/pkg/mod
            frontend/node_modules
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-node-${{ hashFiles('**/yarn.lock') }}

      - name: Build project
        run: |
          # If you need to install frontend dependencies, uncomment:
          # yarn install --cwd frontend
          GOBUILD=${GOBUILD} make -j rebuild
          ls -la backend/build

      # Docker login with a Personal Access Token (Docker Hub)
      - name: Docker login with token
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.merged == false }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # Build & push Docker image for pull requests (tag = pr-<PR_NUMBER>)
      - name: Build & push Docker image for PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMIT="${{ github.sha }}"
          make -j docker TAG=pr-$PR_NUMBER COMMIT=$COMMIT

      # Build & push Docker image for release tags (e.g. "v1.2.3")
      - name: Build & push Docker image for release tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          make -j docker TAG=$TAG COMMIT=$COMMIT

      # Build & push Docker image for feature/* branches
      - name: Build & push Docker image for feature branches
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          TAG="feature"
          COMMIT="${{ github.sha }}"
          make -j docker TAG=$TAG COMMIT=$COMMIT

  # -------------------------------------------------------------
  # 2) Release job: only runs if the ref is a tag that starts with "v"
  #    Uses a matrix to upload multiple binaries (windows-amd64, darwin-amd64, etc.)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    # Define a matrix of platforms to avoid duplicating upload steps
    strategy:
      fail-fast: false
      matrix:
        platform: [ "windows-amd64", "darwin-amd64", "linux-arm64", "linux-amd64" ]
        # You can add or remove platforms from this array

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      # This step will run once per platform in the matrix
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: backend/build/hashi-ui-${{ matrix.platform }}
          asset_name: hashi-ui-${{ matrix.platform }}
          asset_content_type: application/octet-stream
